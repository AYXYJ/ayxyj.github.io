package main

import(
	"fmt"
)

func main()  {
	test2()
}
/*
下划线"_"本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符
但是它对应的值会被忽略(比如:忽略某个返回值)。所以仅能被作为占位符使用，不能作为标识符使用
*/

/*
值类型和引用类型的说明
1)值类型:基本数据类型int系列, float系列, bool, string 、数组和结构体 struct
2)引用类型:指针、slice切片、map、管道chan、interface 等都是引用类型
		Go
			1)值类型:变量直接存储值，内存通常在栈中分配
			2)引用类型:变量存储的是一个地址，这个地址对应的空间才真正存储数据(值)，内存通常在堆上分配，当没有任何变量引用这个地址时，该地址对应的数据空间就成为一个垃圾，由GC来回收
	
		Java
			栈内存里面存放基本类型的变量和对象的引用变量
			堆内存里面存放new创建的对象和数组
*/
func test2()  {
	//地址传递修改值
	var a int = 100 
	fmt.Printf("修改前的 a 的值: %d \n" , a)
	var ptr * int 
	ptr = &a
	*ptr = 250
	fmt.Printf("修改后的 a 的值: %d \n" , a)
}
func test1()  {
	//l)基本数据类型，变量存的就是值，也叫值类型
	//2)获取变量的地址，用&，比如:var num int，获取num 的地址: &num
	//3)指针类型，指针变量存的是一个地址，这个地址指向的空间存的才是值   比如: var ptr *int = &num
	//4)获取指针类型所指向的值，使用:*，比如: var ptr *int，使用*ptr获取 ptr指向的值

	//指针指的是存储数据的空间单元的地址 &  ， 因此 ， 要想获取某地址存储单元的数据 需要通过 *
	//值类型 地址类型    （函数中有概念  ： 值传递  地址传递    即形参 和 实参）

	var i int = 10
	fmt.Printf("输出 i 的存储单单元的地址：%d \n",&i)

	var p *int  
	p  =  &i
	if *p == i {
		fmt.Printf("指针p指向的存储单元和i所指向的单元是一个地址，固因此数据值也相等！\n")
	}
	
	fmt.Printf("============\n")
	fmt.Printf("p 地址  %v\n", p)
	fmt.Printf("i 地址 ：%v\n", &i)
	fmt.Printf("p 存储单元的值 ：%v\n", *p)
	fmt.Printf("p 地址的地址 : %v\n", &p)
}